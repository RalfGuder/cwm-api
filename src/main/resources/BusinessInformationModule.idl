#ifndef BUSINESS_INFORMATION_MODULE_IDL
#define BUSINESS_INFORMATION_MODULE_IDL
#pragma prefix "org.omg.cwm.foundation"
#include "Reflective.idl"
#include "CoreModule.idl"

module BusinessInformationModule
{
   typedef sequence<CoreModule::ModelElement> ModelElementSet;
   interface ResponsiblePartyClass;
   interface ResponsibleParty;
   typedef sequence<ResponsibleParty> ResponsiblePartySet;
   interface TelephoneClass;
   interface Telephone;
   typedef sequence<Telephone> TelephoneSet;
   typedef sequence<Telephone> TelephoneUList;
   interface EmailClass;
   interface Email;
   typedef sequence<Email> EmailSet;
   typedef sequence<Email> EmailUList;
   interface LocationClass;
   interface Location;
   typedef sequence<Location> LocationSet;
   typedef sequence<Location> LocationUList;
   interface ContactClass;
   interface Contact;
   typedef sequence<Contact> ContactSet;
   typedef sequence<Contact> ContactUList;
   interface DescriptionClass;
   interface Description;
   typedef sequence<Description> DescriptionSet;
   interface DocumentClass;
   interface Document;
   typedef sequence<Document> DocumentSet;
   interface ResourceLocatorClass;
   interface ResourceLocator;
   typedef sequence<ResourceLocator> ResourceLocatorSet;
   typedef sequence<ResourceLocator> ResourceLocatorUList;
   interface BusinessInformationModulePackage;

   interface ResponsiblePartyClass : CoreModule::NamespaceClass
   {
      readonly attribute ResponsiblePartySet all_of_type_responsible_party;
      readonly attribute ResponsiblePartySet all_of_class_responsible_party;
      ResponsibleParty create_responsible_party (
         in CoreModule::Name name,
         in CoreModule::VisibilityKind visibility,
         in string responsibility)
         raises (Reflective::MofError);
   };

   interface ResponsibleParty : ResponsiblePartyClass, CoreModule::Namespace
   {
      string responsibility ()
         raises (Reflective::MofError);
      void set_responsibility (in string new_value)
         raises (Reflective::MofError);
      ContactUList contact ()
         raises (Reflective::MofError);
      void set_contact (in ContactUList new_value)
         raises (Reflective::MofError);
      void unset_contact ()
         raises (Reflective::MofError);
      void add_contact (in BusinessInformationModule::Contact new_element)
         raises (Reflective::MofError);
      void add_contact_before (
         in BusinessInformationModule::Contact new_element,
         in BusinessInformationModule::Contact before_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void modify_contact (
         in BusinessInformationModule::Contact old_element,
         in BusinessInformationModule::Contact new_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove_contact (in BusinessInformationModule::Contact old_element)
         raises (Reflective::NotFound, Reflective::MofError);
      ModelElementSet model_element ()
         raises (Reflective::MofError);
      void set_model_element (in ModelElementSet new_value)
         raises (Reflective::MofError);
      void unset_model_element ()
         raises (Reflective::MofError);
      void add_model_element (in CoreModule::ModelElement new_element)
         raises (Reflective::MofError);
      void modify_model_element (
         in CoreModule::ModelElement old_element,
         in CoreModule::ModelElement new_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove_model_element (in CoreModule::ModelElement old_element)
         raises (Reflective::NotFound, Reflective::MofError);
   }; // end of interface ResponsibleParty

   interface TelephoneClass : CoreModule::ModelElementClass
   {
      readonly attribute TelephoneSet all_of_type_telephone;
      readonly attribute TelephoneSet all_of_class_telephone;
      Telephone create_telephone (
         in CoreModule::Name name,
         in CoreModule::VisibilityKind visibility,
         in string phone_number,
         in string phone_type)
         raises (Reflective::MofError);
   };

   interface Telephone : TelephoneClass, CoreModule::ModelElement
   {
      string phone_number ()
         raises (Reflective::MofError);
      void set_phone_number (in string new_value)
         raises (Reflective::MofError);
      string phone_type ()
         raises (Reflective::MofError);
      void set_phone_type (in string new_value)
         raises (Reflective::MofError);
      ContactSet contact ()
         raises (Reflective::MofError);
      void set_contact (in ContactSet new_value)
         raises (Reflective::MofError);
      void unset_contact ()
         raises (Reflective::MofError);
      void add_contact (in BusinessInformationModule::Contact new_element)
         raises (Reflective::MofError);
      void modify_contact (
         in BusinessInformationModule::Contact old_element,
         in BusinessInformationModule::Contact new_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove_contact (in BusinessInformationModule::Contact old_element)
         raises (Reflective::NotFound, Reflective::MofError);
   }; // end of interface Telephone

   interface EmailClass : CoreModule::ModelElementClass
   {
      readonly attribute EmailSet all_of_type_email;
      readonly attribute EmailSet all_of_class_email;
      Email create_email (
         in CoreModule::Name name,
         in CoreModule::VisibilityKind visibility,
         in string email_address,
         in string email_type)
         raises (Reflective::MofError);
   };

   interface Email : EmailClass, CoreModule::ModelElement
   {
      string email_address ()
         raises (Reflective::MofError);
      void set_email_address (in string new_value)
         raises (Reflective::MofError);
      string email_type ()
         raises (Reflective::MofError);
      void set_email_type (in string new_value)
         raises (Reflective::MofError);
      ContactSet contact ()
         raises (Reflective::MofError);
      void set_contact (in ContactSet new_value)
         raises (Reflective::MofError);
      void unset_contact ()
         raises (Reflective::MofError);
      void add_contact (in BusinessInformationModule::Contact new_element)
         raises (Reflective::MofError);
      void modify_contact (
         in BusinessInformationModule::Contact old_element,
         in BusinessInformationModule::Contact new_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove_contact (in BusinessInformationModule::Contact old_element)
         raises (Reflective::NotFound, Reflective::MofError);
   }; // end of interface Email

   interface LocationClass : CoreModule::ModelElementClass
   {
      readonly attribute LocationSet all_of_type_location;
      readonly attribute LocationSet all_of_class_location;
      Location create_location (
         in CoreModule::Name name,
         in CoreModule::VisibilityKind visibility,
         in string location_type,
         in string address,
         in string city,
         in string post_code,
         in string area,
         in string country)
         raises (Reflective::MofError);
   };

   interface Location : LocationClass, CoreModule::ModelElement
   {
      string location_type ()
         raises (Reflective::MofError);
      void set_location_type (in string new_value)
         raises (Reflective::MofError);
      string address ()
         raises (Reflective::MofError);
      void set_address (in string new_value)
         raises (Reflective::MofError);
      string city ()
         raises (Reflective::MofError);
      void set_city (in string new_value)
         raises (Reflective::MofError);
      string post_code ()
         raises (Reflective::MofError);
      void set_post_code (in string new_value)
         raises (Reflective::MofError);
      string area ()
         raises (Reflective::MofError);
      void set_area (in string new_value)
         raises (Reflective::MofError);
      string country ()
         raises (Reflective::MofError);
      void set_country (in string new_value)
         raises (Reflective::MofError);
      ContactSet contact ()
         raises (Reflective::MofError);
      void set_contact (in ContactSet new_value)
         raises (Reflective::MofError);
      void unset_contact ()
         raises (Reflective::MofError);
      void add_contact (in BusinessInformationModule::Contact new_element)
         raises (Reflective::MofError);
      void modify_contact (
         in BusinessInformationModule::Contact old_element,
         in BusinessInformationModule::Contact new_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove_contact (in BusinessInformationModule::Contact old_element)
         raises (Reflective::NotFound, Reflective::MofError);
   }; // end of interface Location

   interface ContactClass : CoreModule::ModelElementClass
   {
      readonly attribute ContactSet all_of_type_contact;
      readonly attribute ContactSet all_of_class_contact;
      Contact create_contact (
         in CoreModule::Name name,
         in CoreModule::VisibilityKind visibility)
         raises (Reflective::MofError);
   };

   interface Contact : ContactClass, CoreModule::ModelElement
   {
      EmailUList email ()
         raises (Reflective::MofError);
      void set_email (in EmailUList new_value)
         raises (Reflective::MofError);
      void unset_email ()
         raises (Reflective::MofError);
      void add_email (in BusinessInformationModule::Email new_element)
         raises (Reflective::MofError);
      void add_email_before (
         in BusinessInformationModule::Email new_element,
         in BusinessInformationModule::Email before_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void modify_email (
         in BusinessInformationModule::Email old_element,
         in BusinessInformationModule::Email new_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove_email (in BusinessInformationModule::Email old_element)
         raises (Reflective::NotFound, Reflective::MofError);
      LocationUList location ()
         raises (Reflective::MofError);
      void set_location (in LocationUList new_value)
         raises (Reflective::MofError);
      void unset_location ()
         raises (Reflective::MofError);
      void add_location (in BusinessInformationModule::Location new_element)
         raises (Reflective::MofError);
      void add_location_before (
         in BusinessInformationModule::Location new_element,
         in BusinessInformationModule::Location before_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void modify_location (
         in BusinessInformationModule::Location old_element,
         in BusinessInformationModule::Location new_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove_location (in BusinessInformationModule::Location old_element)
         raises (Reflective::NotFound, Reflective::MofError);
      ResponsiblePartySet responsible_party ()
         raises (Reflective::MofError);
      void set_responsible_party (in ResponsiblePartySet new_value)
         raises (Reflective::MofError);
      void unset_responsible_party ()
         raises (Reflective::MofError);
      void add_responsible_party (in ResponsibleParty new_element)
         raises (Reflective::MofError);
      void modify_responsible_party (
         in ResponsibleParty old_element,
         in ResponsibleParty new_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove_responsible_party (in ResponsibleParty old_element)
         raises (Reflective::NotFound, Reflective::MofError);
      TelephoneUList telephone ()
         raises (Reflective::MofError);
      void set_telephone (in TelephoneUList new_value)
         raises (Reflective::MofError);
      void unset_telephone ()
         raises (Reflective::MofError);
      void add_telephone (in BusinessInformationModule::Telephone new_element)
         raises (Reflective::MofError);
      void add_telephone_before (
         in BusinessInformationModule::Telephone new_element,
         in BusinessInformationModule::Telephone before_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void modify_telephone (
         in BusinessInformationModule::Telephone old_element,
         in BusinessInformationModule::Telephone new_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove_telephone (in BusinessInformationModule::Telephone old_element)
         raises (Reflective::NotFound, Reflective::MofError);
      ResourceLocatorUList url ()
         raises (Reflective::MofError);
      void set_url (in ResourceLocatorUList new_value)
         raises (Reflective::MofError);
      void unset_url ()
         raises (Reflective::MofError);
      void add_url (in ResourceLocator new_element)
         raises (Reflective::MofError);
      void add_url_before (
         in ResourceLocator new_element,
         in ResourceLocator before_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void modify_url (
         in ResourceLocator old_element,
         in ResourceLocator new_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove_url (in ResourceLocator old_element)
         raises (Reflective::NotFound, Reflective::MofError);
   }; // end of interface Contact

   interface DescriptionClass : CoreModule::NamespaceClass
   {
      readonly attribute DescriptionSet all_of_type_description;
      readonly attribute DescriptionSet all_of_class_description;
      Description create_description (
         in CoreModule::Name name,
         in CoreModule::VisibilityKind visibility,
         in string body,
         in CoreModule::Name language,
         in string type)
         raises (Reflective::MofError);
   };

   interface Description : DescriptionClass, CoreModule::Namespace
   {
      string body ()
         raises (Reflective::MofError);
      void set_body (in string new_value)
         raises (Reflective::MofError);
      CoreModule::Name language ()
         raises (Reflective::MofError);
      void set_language (in CoreModule::Name new_value)
         raises (Reflective::MofError);
      string type ()
         raises (Reflective::MofError);
      void set_type (in string new_value)
         raises (Reflective::MofError);
      ModelElementSet model_element ()
         raises (Reflective::MofError);
      void set_model_element (in ModelElementSet new_value)
         raises (Reflective::MofError);
      void unset_model_element ()
         raises (Reflective::MofError);
      void add_model_element (in CoreModule::ModelElement new_element)
         raises (Reflective::MofError);
      void modify_model_element (
         in CoreModule::ModelElement old_element,
         in CoreModule::ModelElement new_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove_model_element (in CoreModule::ModelElement old_element)
         raises (Reflective::NotFound, Reflective::MofError);
   }; // end of interface Description

   interface DocumentClass : CoreModule::NamespaceClass
   {
      readonly attribute DocumentSet all_of_type_document;
      readonly attribute DocumentSet all_of_class_document;
      Document create_document (
         in CoreModule::Name name,
         in CoreModule::VisibilityKind visibility,
         in string reference,
         in string type)
         raises (Reflective::MofError);
   };

   interface Document : DocumentClass, CoreModule::Namespace
   {
      string reference ()
         raises (Reflective::MofError);
      void set_reference (in string new_value)
         raises (Reflective::MofError);
      string type ()
         raises (Reflective::MofError);
      void set_type (in string new_value)
         raises (Reflective::MofError);
      ModelElementSet model_element ()
         raises (Reflective::MofError);
      void set_model_element (in ModelElementSet new_value)
         raises (Reflective::MofError);
      void unset_model_element ()
         raises (Reflective::MofError);
      void add_model_element (in CoreModule::ModelElement new_element)
         raises (Reflective::MofError);
      void modify_model_element (
         in CoreModule::ModelElement old_element,
         in CoreModule::ModelElement new_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove_model_element (in CoreModule::ModelElement old_element)
         raises (Reflective::NotFound, Reflective::MofError);
   }; // end of interface Document

   interface ResourceLocatorClass : CoreModule::ModelElementClass
   {
      readonly attribute ResourceLocatorSet all_of_type_resource_locator;
      readonly attribute ResourceLocatorSet all_of_class_resource_locator;
      ResourceLocator create_resource_locator (
         in CoreModule::Name name,
         in CoreModule::VisibilityKind visibility,
         in string url)
         raises (Reflective::MofError);
   };

   interface ResourceLocator : ResourceLocatorClass, CoreModule::ModelElement
   {
      string url ()
         raises (Reflective::MofError);
      void set_url (in string new_value)
         raises (Reflective::MofError);
      ContactSet contact ()
         raises (Reflective::MofError);
      void set_contact (in ContactSet new_value)
         raises (Reflective::MofError);
      void unset_contact ()
         raises (Reflective::MofError);
      void add_contact (in BusinessInformationModule::Contact new_element)
         raises (Reflective::MofError);
      void modify_contact (
         in BusinessInformationModule::Contact old_element,
         in BusinessInformationModule::Contact new_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove_contact (in BusinessInformationModule::Contact old_element)
         raises (Reflective::NotFound, Reflective::MofError);
   }; // end of interface ResourceLocator

   struct DocumentDescribesLink
   {
      CoreModule::ModelElement model_element;
      BusinessInformationModule::Document document;
   };
   typedef sequence<DocumentDescribesLink> DocumentDescribesLinkSet;

   interface DocumentDescribes : Reflective::RefAssociation
   {
      DocumentDescribesLinkSet all_document_describes_links()
         raises (Reflective::MofError);
      boolean exists (
         in CoreModule::ModelElement model_element,
         in BusinessInformationModule::Document document)
         raises (Reflective::MofError);
      ModelElementSet model_element (in BusinessInformationModule::Document document)
         raises (Reflective::MofError);
      DocumentSet document (in CoreModule::ModelElement model_element)
         raises (Reflective::MofError);
      void add (
         in CoreModule::ModelElement model_element,
         in BusinessInformationModule::Document document)
         raises (Reflective::MofError);
      void modify_model_element (
         in CoreModule::ModelElement model_element,
         in BusinessInformationModule::Document document,
         in CoreModule::ModelElement new_model_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void modify_document (
         in CoreModule::ModelElement model_element,
         in BusinessInformationModule::Document document,
         in BusinessInformationModule::Document new_document)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove (
         in CoreModule::ModelElement model_element,
         in BusinessInformationModule::Document document)
         raises (Reflective::NotFound, Reflective::MofError);
   }; // end of interface DocumentDescribes

   struct ModelElementDescriptionLink
   {
      CoreModule::ModelElement model_element;
      BusinessInformationModule::Description description;
   };
   typedef sequence<ModelElementDescriptionLink> ModelElementDescriptionLinkSet;

   interface ModelElementDescription : Reflective::RefAssociation
   {
      ModelElementDescriptionLinkSet all_model_element_description_links()
         raises (Reflective::MofError);
      boolean exists (
         in CoreModule::ModelElement model_element,
         in BusinessInformationModule::Description description)
         raises (Reflective::MofError);
      ModelElementSet model_element (in BusinessInformationModule::Description description)
         raises (Reflective::MofError);
      DescriptionSet description (in CoreModule::ModelElement model_element)
         raises (Reflective::MofError);
      void add (
         in CoreModule::ModelElement model_element,
         in BusinessInformationModule::Description description)
         raises (Reflective::MofError);
      void modify_model_element (
         in CoreModule::ModelElement model_element,
         in BusinessInformationModule::Description description,
         in CoreModule::ModelElement new_model_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void modify_description (
         in CoreModule::ModelElement model_element,
         in BusinessInformationModule::Description description,
         in BusinessInformationModule::Description new_description)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove (
         in CoreModule::ModelElement model_element,
         in BusinessInformationModule::Description description)
         raises (Reflective::NotFound, Reflective::MofError);
   }; // end of interface ModelElementDescription

   struct ModelElementResponsibilityLink
   {
      CoreModule::ModelElement model_element;
      ResponsibleParty responsible_party;
   };
   typedef sequence<ModelElementResponsibilityLink> ModelElementResponsibilityLinkSet;

   interface ModelElementResponsibility : Reflective::RefAssociation
   {
      ModelElementResponsibilityLinkSet all_model_element_responsibility_links()
         raises (Reflective::MofError);
      boolean exists (
         in CoreModule::ModelElement model_element,
         in ResponsibleParty responsible_party)
         raises (Reflective::MofError);
      ModelElementSet model_element (in ResponsibleParty responsible_party)
         raises (Reflective::MofError);
      ResponsiblePartySet responsible_party (in CoreModule::ModelElement model_element)
         raises (Reflective::MofError);
      void add (
         in CoreModule::ModelElement model_element,
         in ResponsibleParty responsible_party)
         raises (Reflective::MofError);
      void modify_model_element (
         in CoreModule::ModelElement model_element,
         in ResponsibleParty responsible_party,
         in CoreModule::ModelElement new_model_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void modify_responsible_party (
         in CoreModule::ModelElement model_element,
         in ResponsibleParty responsible_party,
         in ResponsibleParty new_responsible_party)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove (
         in CoreModule::ModelElement model_element,
         in ResponsibleParty responsible_party)
         raises (Reflective::NotFound, Reflective::MofError);
   }; // end of interface ModelElementResponsibility

   interface BusinessInformationModulePackageFactory
   {
      BusinessInformationModulePackage create_business_information_module_package ()
         raises (Reflective::MofError);
   };

   interface BusinessInformationModulePackage : Reflective::RefPackage
   {
      readonly attribute CoreModule::CoreModulePackage core_ref;
      readonly attribute ResponsiblePartyClass responsible_party_ref;
      readonly attribute TelephoneClass telephone_ref;
      readonly attribute EmailClass email_ref;
      readonly attribute LocationClass location_ref;
      readonly attribute ContactClass contact_ref;
      readonly attribute DescriptionClass description_ref;
      readonly attribute DocumentClass document_ref;
      readonly attribute ResourceLocatorClass resource_locator_ref;
      readonly attribute DocumentDescribes document_describes_ref;
      readonly attribute ModelElementDescription model_element_description_ref;
      readonly attribute ModelElementResponsibility model_element_responsibility_ref;
   };
};

#endif
