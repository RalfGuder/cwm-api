#ifndef INFORMATION_VISUALIZATION_MODULE_IDL
#define INFORMATION_VISUALIZATION_MODULE_IDL
#pragma prefix "org.omg.cwm.analysis"
#include "Reflective.idl"
#include "CoreModule.idl"
#include "ExpressionsModule.idl"

module InformationVisualizationModule
{
   interface RenderedObjectClass;
   interface RenderedObject;
   typedef sequence<RenderedObject> RenderedObjectSet;
   interface CwmRenderedObjectSetClass;
   interface CwmRenderedObjectSet;
   typedef sequence<CwmRenderedObjectSet> CwmRenderedObjectSetSet;
   interface RenderingClass;
   interface Rendering;
   typedef sequence<Rendering> RenderingSet;
   interface XSLRenderingClass;
   interface XSLRendering;
   typedef sequence<XSLRendering> XSLRenderingSet;
   interface InformationVisualizationModulePackage;

   interface RenderedObjectClass : CoreModule::ClassifierClass
   {
      readonly attribute RenderedObjectSet all_of_type_rendered_object;
      readonly attribute RenderedObjectSet all_of_class_rendered_object;
      RenderedObject create_rendered_object (
         in CoreModule::Name name,
         in CoreModule::VisibilityKind visibility,
         in boolean is_abstract,
         in ExpressionsModule::ExpressionNode formula,
         in string action,
         in string file_name,
         in string type,
         in string url)
         raises (Reflective::MofError);
   };

   interface RenderedObject : RenderedObjectClass, CoreModule::Classifier
   {
      ExpressionsModule::ExpressionNode formula ()
         raises (Reflective::MofError);
      void set_formula (in ExpressionsModule::ExpressionNode new_value)
         raises (Reflective::MofError);
      string action ()
         raises (Reflective::MofError);
      void set_action (in string new_value)
         raises (Reflective::MofError);
      string file_name ()
         raises (Reflective::MofError);
      void set_file_name (in string new_value)
         raises (Reflective::MofError);
      string type ()
         raises (Reflective::MofError);
      void set_type (in string new_value)
         raises (Reflective::MofError);
      string url ()
         raises (Reflective::MofError);
      void set_url (in string new_value)
         raises (Reflective::MofError);
      RenderingSet rendering ()
         raises (Reflective::MofError);
      void set_rendering (in RenderingSet new_value)
         raises (Reflective::MofError);
      void unset_rendering ()
         raises (Reflective::MofError);
      void add_rendering (in InformationVisualizationModule::Rendering new_element)
         raises (Reflective::MofError);
      void modify_rendering (
         in InformationVisualizationModule::Rendering old_element,
         in InformationVisualizationModule::Rendering new_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove_rendering (in InformationVisualizationModule::Rendering old_element)
         raises (Reflective::NotFound, Reflective::MofError);
      InformationVisualizationModule::Rendering default_rendering ()
         raises (Reflective::NotSet, Reflective::MofError);
      void set_default_rendering (in InformationVisualizationModule::Rendering new_value)
         raises (Reflective::MofError);
      void unset_default_rendering ()
         raises (Reflective::MofError);
      RenderedObjectSet component ()
         raises (Reflective::MofError);
      void set_component (in RenderedObjectSet new_value)
         raises (Reflective::MofError);
      void unset_component ()
         raises (Reflective::MofError);
      void add_component (in RenderedObject new_element)
         raises (Reflective::MofError);
      void modify_component (
         in RenderedObject old_element,
         in RenderedObject new_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove_component (in RenderedObject old_element)
         raises (Reflective::NotFound, Reflective::MofError);
      RenderedObjectSet composite ()
         raises (Reflective::MofError);
      void set_composite (in RenderedObjectSet new_value)
         raises (Reflective::MofError);
      void unset_composite ()
         raises (Reflective::MofError);
      void add_composite (in RenderedObject new_element)
         raises (Reflective::MofError);
      void modify_composite (
         in RenderedObject old_element,
         in RenderedObject new_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove_composite (in RenderedObject old_element)
         raises (Reflective::NotFound, Reflective::MofError);
      RenderedObjectSet neighbor ()
         raises (Reflective::MofError);
      void set_neighbor (in RenderedObjectSet new_value)
         raises (Reflective::MofError);
      void unset_neighbor ()
         raises (Reflective::MofError);
      void add_neighbor (in RenderedObject new_element)
         raises (Reflective::MofError);
      void modify_neighbor (
         in RenderedObject old_element,
         in RenderedObject new_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove_neighbor (in RenderedObject old_element)
         raises (Reflective::NotFound, Reflective::MofError);
      RenderedObjectSet referencing_neighbor ()
         raises (Reflective::MofError);
      void set_referencing_neighbor (in RenderedObjectSet new_value)
         raises (Reflective::MofError);
      void unset_referencing_neighbor ()
         raises (Reflective::MofError);
      void add_referencing_neighbor (in RenderedObject new_element)
         raises (Reflective::MofError);
      void modify_referencing_neighbor (
         in RenderedObject old_element,
         in RenderedObject new_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove_referencing_neighbor (in RenderedObject old_element)
         raises (Reflective::NotFound, Reflective::MofError);
      CoreModule::ModelElement model_element ()
         raises (Reflective::NotSet, Reflective::MofError);
      void set_model_element (in CoreModule::ModelElement new_value)
         raises (Reflective::MofError);
      void unset_model_element ()
         raises (Reflective::MofError);
      CwmRenderedObjectSet rendered_object_set ()
         raises (Reflective::MofError);
      void set_rendered_object_set (in CwmRenderedObjectSet new_value)
         raises (Reflective::MofError);
   }; // end of interface RenderedObject

   interface CwmRenderedObjectSetClass : CoreModule::PackageClass
   {
      readonly attribute CwmRenderedObjectSetSet all_of_type_cwm_rendered_object_set;
      readonly attribute CwmRenderedObjectSetSet all_of_class_cwm_rendered_object_set;
      CwmRenderedObjectSet create_cwm_rendered_object_set (
         in CoreModule::Name name,
         in CoreModule::VisibilityKind visibility)
         raises (Reflective::MofError);
   };

   interface CwmRenderedObjectSet : CwmRenderedObjectSetClass, CoreModule::Package
   {
      RenderedObjectSet rendered_object ()
         raises (Reflective::MofError);
      void set_rendered_object (in RenderedObjectSet new_value)
         raises (Reflective::MofError);
      void unset_rendered_object ()
         raises (Reflective::MofError);
      void add_rendered_object (in RenderedObject new_element)
         raises (Reflective::MofError);
      void modify_rendered_object (
         in RenderedObject old_element,
         in RenderedObject new_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove_rendered_object (in RenderedObject old_element)
         raises (Reflective::NotFound, Reflective::MofError);
      RenderingSet rendering ()
         raises (Reflective::MofError);
      void set_rendering (in RenderingSet new_value)
         raises (Reflective::MofError);
      void unset_rendering ()
         raises (Reflective::MofError);
      void add_rendering (in InformationVisualizationModule::Rendering new_element)
         raises (Reflective::MofError);
      void modify_rendering (
         in InformationVisualizationModule::Rendering old_element,
         in InformationVisualizationModule::Rendering new_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove_rendering (in InformationVisualizationModule::Rendering old_element)
         raises (Reflective::NotFound, Reflective::MofError);
   }; // end of interface CwmRenderedObjectSet

   interface RenderingClass : CoreModule::FeatureClass
   {
      readonly attribute RenderingSet all_of_type_rendering;
      readonly attribute RenderingSet all_of_class_rendering;
      Rendering create_rendering (
         in CoreModule::Name name,
         in CoreModule::VisibilityKind visibility,
         in CoreModule::ScopeKind owner_scope,
         in ExpressionsModule::ExpressionNode formula,
         in string action,
         in string file_name,
         in string type,
         in string url)
         raises (Reflective::MofError);
   };

   interface Rendering : RenderingClass, CoreModule::Feature
   {
      ExpressionsModule::ExpressionNode formula ()
         raises (Reflective::MofError);
      void set_formula (in ExpressionsModule::ExpressionNode new_value)
         raises (Reflective::MofError);
      string action ()
         raises (Reflective::MofError);
      void set_action (in string new_value)
         raises (Reflective::MofError);
      string file_name ()
         raises (Reflective::MofError);
      void set_file_name (in string new_value)
         raises (Reflective::MofError);
      string type ()
         raises (Reflective::MofError);
      void set_type (in string new_value)
         raises (Reflective::MofError);
      string url ()
         raises (Reflective::MofError);
      void set_url (in string new_value)
         raises (Reflective::MofError);
      RenderedObjectSet rendered_object ()
         raises (Reflective::MofError);
      void set_rendered_object (in RenderedObjectSet new_value)
         raises (Reflective::MofError);
      void unset_rendered_object ()
         raises (Reflective::MofError);
      void add_rendered_object (in RenderedObject new_element)
         raises (Reflective::MofError);
      void modify_rendered_object (
         in RenderedObject old_element,
         in RenderedObject new_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove_rendered_object (in RenderedObject old_element)
         raises (Reflective::NotFound, Reflective::MofError);
      RenderedObjectSet defaulted_rendered_object ()
         raises (Reflective::MofError);
      void set_defaulted_rendered_object (in RenderedObjectSet new_value)
         raises (Reflective::MofError);
      void unset_defaulted_rendered_object ()
         raises (Reflective::MofError);
      void add_defaulted_rendered_object (in RenderedObject new_element)
         raises (Reflective::MofError);
      void modify_defaulted_rendered_object (
         in RenderedObject old_element,
         in RenderedObject new_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove_defaulted_rendered_object (in RenderedObject old_element)
         raises (Reflective::NotFound, Reflective::MofError);
      CwmRenderedObjectSet rendered_object_set ()
         raises (Reflective::MofError);
      void set_rendered_object_set (in CwmRenderedObjectSet new_value)
         raises (Reflective::MofError);
   }; // end of interface Rendering

   interface XSLRenderingClass : RenderingClass
   {
      readonly attribute XSLRenderingSet all_of_type_xslrendering;
      readonly attribute XSLRenderingSet all_of_class_xslrendering;
      XSLRendering create_xslrendering (
         in CoreModule::Name name,
         in CoreModule::VisibilityKind visibility,
         in CoreModule::ScopeKind owner_scope,
         in ExpressionsModule::ExpressionNode formula,
         in string action,
         in string file_name,
         in string type,
         in string url)
         raises (Reflective::MofError);
   };

   interface XSLRendering : XSLRenderingClass, Rendering
   {
   }; // end of interface XSLRendering

   struct CompositesReferenceComponentsLink
   {
      RenderedObject composite;
      RenderedObject component;
   };
   typedef sequence<CompositesReferenceComponentsLink> CompositesReferenceComponentsLinkSet;

   interface CompositesReferenceComponents : Reflective::RefAssociation
   {
      CompositesReferenceComponentsLinkSet all_composites_reference_components_links()
         raises (Reflective::MofError);
      boolean exists (
         in RenderedObject composite,
         in RenderedObject component)
         raises (Reflective::MofError);
      RenderedObjectSet composite (in RenderedObject component)
         raises (Reflective::MofError);
      RenderedObjectSet component (in RenderedObject composite)
         raises (Reflective::MofError);
      void add (
         in RenderedObject composite,
         in RenderedObject component)
         raises (Reflective::MofError);
      void modify_composite (
         in RenderedObject composite,
         in RenderedObject component,
         in RenderedObject new_composite)
         raises (Reflective::NotFound, Reflective::MofError);
      void modify_component (
         in RenderedObject composite,
         in RenderedObject component,
         in RenderedObject new_component)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove (
         in RenderedObject composite,
         in RenderedObject component)
         raises (Reflective::NotFound, Reflective::MofError);
   }; // end of interface CompositesReferenceComponents

   struct RenderedObjectsReferenceRenderingsLink
   {
      InformationVisualizationModule::Rendering rendering;
      RenderedObject rendered_object;
   };
   typedef sequence<RenderedObjectsReferenceRenderingsLink> RenderedObjectsReferenceRenderingsLinkSet;

   interface RenderedObjectsReferenceRenderings : Reflective::RefAssociation
   {
      RenderedObjectsReferenceRenderingsLinkSet all_rendered_objects_reference_renderings_links()
         raises (Reflective::MofError);
      boolean exists (
         in InformationVisualizationModule::Rendering rendering,
         in RenderedObject rendered_object)
         raises (Reflective::MofError);
      RenderingSet rendering (in RenderedObject rendered_object)
         raises (Reflective::MofError);
      RenderedObjectSet rendered_object (in InformationVisualizationModule::Rendering rendering)
         raises (Reflective::MofError);
      void add (
         in InformationVisualizationModule::Rendering rendering,
         in RenderedObject rendered_object)
         raises (Reflective::MofError);
      void modify_rendering (
         in InformationVisualizationModule::Rendering rendering,
         in RenderedObject rendered_object,
         in InformationVisualizationModule::Rendering new_rendering)
         raises (Reflective::NotFound, Reflective::MofError);
      void modify_rendered_object (
         in InformationVisualizationModule::Rendering rendering,
         in RenderedObject rendered_object,
         in RenderedObject new_rendered_object)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove (
         in InformationVisualizationModule::Rendering rendering,
         in RenderedObject rendered_object)
         raises (Reflective::NotFound, Reflective::MofError);
   }; // end of interface RenderedObjectsReferenceRenderings

   struct RenderedObjectsReferenceDefaultRenderingLink
   {
      Rendering default_rendering;
      RenderedObject defaulted_rendered_object;
   };
   typedef sequence<RenderedObjectsReferenceDefaultRenderingLink> RenderedObjectsReferenceDefaultRenderingLinkSet;

   interface RenderedObjectsReferenceDefaultRendering : Reflective::RefAssociation
   {
      RenderedObjectsReferenceDefaultRenderingLinkSet all_rendered_objects_reference_default_rendering_links()
         raises (Reflective::MofError);
      boolean exists (
         in Rendering default_rendering,
         in RenderedObject defaulted_rendered_object)
         raises (Reflective::MofError);
      Rendering default_rendering (in RenderedObject defaulted_rendered_object)
         raises (Reflective::MofError);
      RenderedObjectSet defaulted_rendered_object (in Rendering default_rendering)
         raises (Reflective::MofError);
      void add (
         in Rendering default_rendering,
         in RenderedObject defaulted_rendered_object)
         raises (Reflective::MofError);
      void modify_default_rendering (
         in Rendering default_rendering,
         in RenderedObject defaulted_rendered_object,
         in Rendering new_default_rendering)
         raises (Reflective::NotFound, Reflective::MofError);
      void modify_defaulted_rendered_object (
         in Rendering default_rendering,
         in RenderedObject defaulted_rendered_object,
         in RenderedObject new_defaulted_rendered_object)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove (
         in Rendering default_rendering,
         in RenderedObject defaulted_rendered_object)
         raises (Reflective::NotFound, Reflective::MofError);
   }; // end of interface RenderedObjectsReferenceDefaultRendering

   struct RenderedObjectsReferenceModelElementLink
   {
      RenderedObject rendered_object;
      CoreModule::ModelElement model_element;
   };
   typedef sequence<RenderedObjectsReferenceModelElementLink> RenderedObjectsReferenceModelElementLinkSet;

   interface RenderedObjectsReferenceModelElement : Reflective::RefAssociation
   {
      RenderedObjectsReferenceModelElementLinkSet all_rendered_objects_reference_model_element_links()
         raises (Reflective::MofError);
      boolean exists (
         in RenderedObject rendered_object,
         in CoreModule::ModelElement model_element)
         raises (Reflective::MofError);
      RenderedObjectSet rendered_object (in CoreModule::ModelElement model_element)
         raises (Reflective::MofError);
      CoreModule::ModelElement model_element (in RenderedObject rendered_object)
         raises (Reflective::MofError);
      void add (
         in RenderedObject rendered_object,
         in CoreModule::ModelElement model_element)
         raises (Reflective::MofError);
      void modify_rendered_object (
         in RenderedObject rendered_object,
         in CoreModule::ModelElement model_element,
         in RenderedObject new_rendered_object)
         raises (Reflective::NotFound, Reflective::MofError);
      void modify_model_element (
         in RenderedObject rendered_object,
         in CoreModule::ModelElement model_element,
         in CoreModule::ModelElement new_model_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove (
         in RenderedObject rendered_object,
         in CoreModule::ModelElement model_element)
         raises (Reflective::NotFound, Reflective::MofError);
   }; // end of interface RenderedObjectsReferenceModelElement

   struct NeighborsReferenceNeighborsLink
   {
      RenderedObject neighbor;
      RenderedObject referencing_neighbor;
   };
   typedef sequence<NeighborsReferenceNeighborsLink> NeighborsReferenceNeighborsLinkSet;

   interface NeighborsReferenceNeighbors : Reflective::RefAssociation
   {
      NeighborsReferenceNeighborsLinkSet all_neighbors_reference_neighbors_links()
         raises (Reflective::MofError);
      boolean exists (
         in RenderedObject neighbor,
         in RenderedObject referencing_neighbor)
         raises (Reflective::MofError);
      RenderedObjectSet neighbor (in RenderedObject referencing_neighbor)
         raises (Reflective::MofError);
      RenderedObjectSet referencing_neighbor (in RenderedObject neighbor)
         raises (Reflective::MofError);
      void add (
         in RenderedObject neighbor,
         in RenderedObject referencing_neighbor)
         raises (Reflective::MofError);
      void modify_neighbor (
         in RenderedObject neighbor,
         in RenderedObject referencing_neighbor,
         in RenderedObject new_neighbor)
         raises (Reflective::NotFound, Reflective::MofError);
      void modify_referencing_neighbor (
         in RenderedObject neighbor,
         in RenderedObject referencing_neighbor,
         in RenderedObject new_referencing_neighbor)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove (
         in RenderedObject neighbor,
         in RenderedObject referencing_neighbor)
         raises (Reflective::NotFound, Reflective::MofError);
   }; // end of interface NeighborsReferenceNeighbors

   struct RenderedObjectSetOwnsRenderedObjectsLink
   {
      RenderedObject rendered_object;
      CwmRenderedObjectSet rendered_object_set;
   };
   typedef sequence<RenderedObjectSetOwnsRenderedObjectsLink> RenderedObjectSetOwnsRenderedObjectsLinkSet;

   interface RenderedObjectSetOwnsRenderedObjects : Reflective::RefAssociation
   {
      RenderedObjectSetOwnsRenderedObjectsLinkSet all_rendered_object_set_owns_rendered_objects_links()
         raises (Reflective::MofError);
      boolean exists (
         in RenderedObject rendered_object,
         in CwmRenderedObjectSet rendered_object_set)
         raises (Reflective::MofError);
      RenderedObjectSet rendered_object (in CwmRenderedObjectSet rendered_object_set)
         raises (Reflective::MofError);
      CwmRenderedObjectSet rendered_object_set (in RenderedObject rendered_object)
         raises (Reflective::MofError);
      void add (
         in RenderedObject rendered_object,
         in CwmRenderedObjectSet rendered_object_set)
         raises (Reflective::MofError);
      void modify_rendered_object (
         in RenderedObject rendered_object,
         in CwmRenderedObjectSet rendered_object_set,
         in RenderedObject new_rendered_object)
         raises (Reflective::NotFound, Reflective::MofError);
      void modify_rendered_object_set (
         in RenderedObject rendered_object,
         in CwmRenderedObjectSet rendered_object_set,
         in CwmRenderedObjectSet new_rendered_object_set)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove (
         in RenderedObject rendered_object,
         in CwmRenderedObjectSet rendered_object_set)
         raises (Reflective::NotFound, Reflective::MofError);
   }; // end of interface RenderedObjectSetOwnsRenderedObjects

   struct RenderedObjectSetOwnsRenderingsLink
   {
      InformationVisualizationModule::Rendering rendering;
      CwmRenderedObjectSet rendered_object_set;
   };
   typedef sequence<RenderedObjectSetOwnsRenderingsLink> RenderedObjectSetOwnsRenderingsLinkSet;

   interface RenderedObjectSetOwnsRenderings : Reflective::RefAssociation
   {
      RenderedObjectSetOwnsRenderingsLinkSet all_rendered_object_set_owns_renderings_links()
         raises (Reflective::MofError);
      boolean exists (
         in InformationVisualizationModule::Rendering rendering,
         in CwmRenderedObjectSet rendered_object_set)
         raises (Reflective::MofError);
      RenderingSet rendering (in CwmRenderedObjectSet rendered_object_set)
         raises (Reflective::MofError);
      CwmRenderedObjectSet rendered_object_set (in InformationVisualizationModule::Rendering rendering)
         raises (Reflective::MofError);
      void add (
         in InformationVisualizationModule::Rendering rendering,
         in CwmRenderedObjectSet rendered_object_set)
         raises (Reflective::MofError);
      void modify_rendering (
         in InformationVisualizationModule::Rendering rendering,
         in CwmRenderedObjectSet rendered_object_set,
         in InformationVisualizationModule::Rendering new_rendering)
         raises (Reflective::NotFound, Reflective::MofError);
      void modify_rendered_object_set (
         in InformationVisualizationModule::Rendering rendering,
         in CwmRenderedObjectSet rendered_object_set,
         in CwmRenderedObjectSet new_rendered_object_set)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove (
         in InformationVisualizationModule::Rendering rendering,
         in CwmRenderedObjectSet rendered_object_set)
         raises (Reflective::NotFound, Reflective::MofError);
   }; // end of interface RenderedObjectSetOwnsRenderings

   interface InformationVisualizationModulePackageFactory
   {
      InformationVisualizationModulePackage create_information_visualization_module_package ()
         raises (Reflective::MofError);
   };

   interface InformationVisualizationModulePackage : Reflective::RefPackage
   {
      readonly attribute CoreModule::CoreModulePackage core_ref;
      readonly attribute ExpressionsModule::ExpressionsModulePackage expressions_ref;
      readonly attribute RenderedObjectClass rendered_object_ref;
      readonly attribute CwmRenderedObjectSetClass cwm_rendered_object_set_ref;
      readonly attribute RenderingClass rendering_ref;
      readonly attribute XSLRenderingClass xslrendering_ref;
      readonly attribute CompositesReferenceComponents composites_reference_components_ref;
      readonly attribute RenderedObjectsReferenceRenderings rendered_objects_reference_renderings_ref;
      readonly attribute RenderedObjectsReferenceDefaultRendering rendered_objects_reference_default_rendering_ref;
      readonly attribute RenderedObjectsReferenceModelElement rendered_objects_reference_model_element_ref;
      readonly attribute NeighborsReferenceNeighbors neighbors_reference_neighbors_ref;
      readonly attribute RenderedObjectSetOwnsRenderedObjects rendered_object_set_owns_rendered_objects_ref;
      readonly attribute RenderedObjectSetOwnsRenderings rendered_object_set_owns_renderings_ref;
   };
};

#endif
