#ifndef MULTIDIMENSIONAL_MODULE_IDL
#define MULTIDIMENSIONAL_MODULE_IDL
#pragma prefix "org.omg.cwm.resource"
#include "Reflective.idl"
#include "InstanceModule.idl"
#include "CoreModule.idl"

module MultidimensionalModule
{
   interface CwmDimensionClass;
   interface CwmDimension;
   typedef sequence<CwmDimension> CwmDimensionSet;
   interface DimensionedObjectClass;
   interface DimensionedObject;
   typedef sequence<DimensionedObject> DimensionedObjectSet;
   typedef sequence<DimensionedObject> DimensionedObjectUList;
   interface MemberClass;
   interface Member;
   typedef sequence<Member> MemberSet;
   interface CwmMemberSetClass;
   interface CwmMemberSet;
   typedef sequence<CwmMemberSet> CwmMemberSetSet;
   interface MemberValueClass;
   interface MemberValue;
   typedef sequence<MemberValue> MemberValueSet;
   interface SchemaClass;
   interface Schema;
   typedef sequence<Schema> SchemaSet;
   interface MultidimensionalModulePackage;

   interface CwmDimensionClass : CoreModule::ClassClass
   {
      readonly attribute CwmDimensionSet all_of_type_cwm_dimension;
      readonly attribute CwmDimensionSet all_of_class_cwm_dimension;
      CwmDimension create_cwm_dimension (
         in CoreModule::Name name,
         in CoreModule::VisibilityKind visibility,
         in boolean is_abstract)
         raises (Reflective::MofError);
   };

   interface CwmDimension : CwmDimensionClass, CoreModule::Class
   {
      DimensionedObjectUList dimensioned_object ()
         raises (Reflective::MofError);
      void set_dimensioned_object (in DimensionedObjectUList new_value)
         raises (Reflective::MofError);
      void unset_dimensioned_object ()
         raises (Reflective::MofError);
      void add_dimensioned_object (in DimensionedObject new_element)
         raises (Reflective::MofError);
      void add_dimensioned_object_before (
         in DimensionedObject new_element,
         in DimensionedObject before_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void modify_dimensioned_object (
         in DimensionedObject old_element,
         in DimensionedObject new_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove_dimensioned_object (in DimensionedObject old_element)
         raises (Reflective::NotFound, Reflective::MofError);
      CwmDimensionSet component ()
         raises (Reflective::MofError);
      void set_component (in CwmDimensionSet new_value)
         raises (Reflective::MofError);
      void unset_component ()
         raises (Reflective::MofError);
      void add_component (in CwmDimension new_element)
         raises (Reflective::MofError);
      void modify_component (
         in CwmDimension old_element,
         in CwmDimension new_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove_component (in CwmDimension old_element)
         raises (Reflective::NotFound, Reflective::MofError);
      CwmDimensionSet composite ()
         raises (Reflective::MofError);
      void set_composite (in CwmDimensionSet new_value)
         raises (Reflective::MofError);
      void unset_composite ()
         raises (Reflective::MofError);
      void add_composite (in CwmDimension new_element)
         raises (Reflective::MofError);
      void modify_composite (
         in CwmDimension old_element,
         in CwmDimension new_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove_composite (in CwmDimension old_element)
         raises (Reflective::NotFound, Reflective::MofError);
      CwmMemberSetSet member_set ()
         raises (Reflective::MofError);
      void set_member_set (in CwmMemberSetSet new_value)
         raises (Reflective::MofError);
      void unset_member_set ()
         raises (Reflective::MofError);
      void add_member_set (in CwmMemberSet new_element)
         raises (Reflective::MofError);
      void modify_member_set (
         in CwmMemberSet old_element,
         in CwmMemberSet new_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove_member_set (in CwmMemberSet old_element)
         raises (Reflective::NotFound, Reflective::MofError);
      MultidimensionalModule::Schema schema ()
         raises (Reflective::MofError);
      void set_schema (in MultidimensionalModule::Schema new_value)
         raises (Reflective::MofError);
   }; // end of interface CwmDimension

   interface DimensionedObjectClass : CoreModule::UmlAttributeClass
   {
      readonly attribute DimensionedObjectSet all_of_type_dimensioned_object;
      readonly attribute DimensionedObjectSet all_of_class_dimensioned_object;
      DimensionedObject create_dimensioned_object (
         in CoreModule::Name name,
         in CoreModule::VisibilityKind visibility,
         in CoreModule::ScopeKind owner_scope,
         in CoreModule::ChangeableKind changeability,
         in CoreModule::Multiplicity multiplicity,
         in CoreModule::OrderingKind ordering,
         in CoreModule::ScopeKind target_scope,
         in CoreModule::Expression initial_value)
         raises (Reflective::MofError);
   };

   interface DimensionedObject : DimensionedObjectClass, CoreModule::UmlAttribute
   {
      CwmDimensionSet dimension ()
         raises (Reflective::MofError);
      void set_dimension (in CwmDimensionSet new_value)
         raises (Reflective::MofError);
      void unset_dimension ()
         raises (Reflective::MofError);
      void add_dimension (in CwmDimension new_element)
         raises (Reflective::MofError);
      void modify_dimension (
         in CwmDimension old_element,
         in CwmDimension new_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove_dimension (in CwmDimension old_element)
         raises (Reflective::NotFound, Reflective::MofError);
      MultidimensionalModule::Schema schema ()
         raises (Reflective::MofError);
      void set_schema (in MultidimensionalModule::Schema new_value)
         raises (Reflective::MofError);
   }; // end of interface DimensionedObject

   interface MemberClass : InstanceModule::UmlObjectClass
   {
      readonly attribute MemberSet all_of_type_member;
      readonly attribute MemberSet all_of_class_member;
      Member create_member (
         in CoreModule::Name name,
         in CoreModule::VisibilityKind visibility)
         raises (Reflective::MofError);
   };

   interface Member : MemberClass, InstanceModule::UmlObject
   {
   }; // end of interface Member

   interface CwmMemberSetClass : InstanceModule::ExtentClass
   {
      readonly attribute CwmMemberSetSet all_of_type_cwm_member_set;
      readonly attribute CwmMemberSetSet all_of_class_cwm_member_set;
      CwmMemberSet create_cwm_member_set (
         in CoreModule::Name name,
         in CoreModule::VisibilityKind visibility)
         raises (Reflective::MofError);
   };

   interface CwmMemberSet : CwmMemberSetClass, InstanceModule::Extent
   {
      CwmDimension dimension ()
         raises (Reflective::MofError);
      void set_dimension (in CwmDimension new_value)
         raises (Reflective::MofError);
   }; // end of interface CwmMemberSet

   interface MemberValueClass : InstanceModule::DataValueClass
   {
      readonly attribute MemberValueSet all_of_type_member_value;
      readonly attribute MemberValueSet all_of_class_member_value;
      MemberValue create_member_value (
         in CoreModule::Name name,
         in CoreModule::VisibilityKind visibility,
         in string value)
         raises (Reflective::MofError);
   };

   interface MemberValue : MemberValueClass, InstanceModule::DataValue
   {
   }; // end of interface MemberValue

   interface SchemaClass : CoreModule::PackageClass
   {
      readonly attribute SchemaSet all_of_type_schema;
      readonly attribute SchemaSet all_of_class_schema;
      Schema create_schema (
         in CoreModule::Name name,
         in CoreModule::VisibilityKind visibility)
         raises (Reflective::MofError);
   };

   interface Schema : SchemaClass, CoreModule::Package
   {
      DimensionedObjectSet dimensioned_object ()
         raises (Reflective::MofError);
      void set_dimensioned_object (in DimensionedObjectSet new_value)
         raises (Reflective::MofError);
      void unset_dimensioned_object ()
         raises (Reflective::MofError);
      void add_dimensioned_object (in DimensionedObject new_element)
         raises (Reflective::MofError);
      void modify_dimensioned_object (
         in DimensionedObject old_element,
         in DimensionedObject new_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove_dimensioned_object (in DimensionedObject old_element)
         raises (Reflective::NotFound, Reflective::MofError);
      CwmDimensionSet dimension ()
         raises (Reflective::MofError);
      void set_dimension (in CwmDimensionSet new_value)
         raises (Reflective::MofError);
      void unset_dimension ()
         raises (Reflective::MofError);
      void add_dimension (in CwmDimension new_element)
         raises (Reflective::MofError);
      void modify_dimension (
         in CwmDimension old_element,
         in CwmDimension new_element)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove_dimension (in CwmDimension old_element)
         raises (Reflective::NotFound, Reflective::MofError);
   }; // end of interface Schema

   struct DimensionsReferenceDimensionedObjectsLink
   {
      CwmDimension dimension;
      DimensionedObject dimensioned_object;
   };
   typedef sequence<DimensionsReferenceDimensionedObjectsLink> DimensionsReferenceDimensionedObjectsLinkSet;

   interface DimensionsReferenceDimensionedObjects : Reflective::RefAssociation
   {
      DimensionsReferenceDimensionedObjectsLinkSet all_dimensions_reference_dimensioned_objects_links()
         raises (Reflective::MofError);
      boolean exists (
         in CwmDimension dimension,
         in DimensionedObject dimensioned_object)
         raises (Reflective::MofError);
      CwmDimensionSet dimension (in DimensionedObject dimensioned_object)
         raises (Reflective::MofError);
      DimensionedObjectUList dimensioned_object (in CwmDimension dimension)
         raises (Reflective::MofError);
      void add (
         in CwmDimension dimension,
         in DimensionedObject dimensioned_object)
         raises (Reflective::MofError);
      void add_before_dimensioned_object (
         in CwmDimension dimension,
         in DimensionedObject dimensioned_object,
         in DimensionedObject before)
         raises (Reflective::NotFound, Reflective::MofError);
      void modify_dimension (
         in CwmDimension dimension,
         in DimensionedObject dimensioned_object,
         in CwmDimension new_dimension)
         raises (Reflective::NotFound, Reflective::MofError);
      void modify_dimensioned_object (
         in CwmDimension dimension,
         in DimensionedObject dimensioned_object,
         in DimensionedObject new_dimensioned_object)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove (
         in CwmDimension dimension,
         in DimensionedObject dimensioned_object)
         raises (Reflective::NotFound, Reflective::MofError);
   }; // end of interface DimensionsReferenceDimensionedObjects

   struct CompositesReferenceComponentsLink
   {
      CwmDimension composite;
      CwmDimension component;
   };
   typedef sequence<CompositesReferenceComponentsLink> CompositesReferenceComponentsLinkSet;

   interface CompositesReferenceComponents : Reflective::RefAssociation
   {
      CompositesReferenceComponentsLinkSet all_composites_reference_components_links()
         raises (Reflective::MofError);
      boolean exists (
         in CwmDimension composite,
         in CwmDimension component)
         raises (Reflective::MofError);
      CwmDimensionSet composite (in CwmDimension component)
         raises (Reflective::MofError);
      CwmDimensionSet component (in CwmDimension composite)
         raises (Reflective::MofError);
      void add (
         in CwmDimension composite,
         in CwmDimension component)
         raises (Reflective::MofError);
      void modify_composite (
         in CwmDimension composite,
         in CwmDimension component,
         in CwmDimension new_composite)
         raises (Reflective::NotFound, Reflective::MofError);
      void modify_component (
         in CwmDimension composite,
         in CwmDimension component,
         in CwmDimension new_component)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove (
         in CwmDimension composite,
         in CwmDimension component)
         raises (Reflective::NotFound, Reflective::MofError);
   }; // end of interface CompositesReferenceComponents

   struct MDSchemaOwnsDimensionedObjectsLink
   {
      DimensionedObject dimensioned_object;
      MultidimensionalModule::Schema schema;
   };
   typedef sequence<MDSchemaOwnsDimensionedObjectsLink> MDSchemaOwnsDimensionedObjectsLinkSet;

   interface MDSchemaOwnsDimensionedObjects : Reflective::RefAssociation
   {
      MDSchemaOwnsDimensionedObjectsLinkSet all_mdschema_owns_dimensioned_objects_links()
         raises (Reflective::MofError);
      boolean exists (
         in DimensionedObject dimensioned_object,
         in MultidimensionalModule::Schema schema)
         raises (Reflective::MofError);
      DimensionedObjectSet dimensioned_object (in MultidimensionalModule::Schema schema)
         raises (Reflective::MofError);
      MultidimensionalModule::Schema schema (in DimensionedObject dimensioned_object)
         raises (Reflective::MofError);
      void add (
         in DimensionedObject dimensioned_object,
         in MultidimensionalModule::Schema schema)
         raises (Reflective::MofError);
      void modify_dimensioned_object (
         in DimensionedObject dimensioned_object,
         in MultidimensionalModule::Schema schema,
         in DimensionedObject new_dimensioned_object)
         raises (Reflective::NotFound, Reflective::MofError);
      void modify_schema (
         in DimensionedObject dimensioned_object,
         in MultidimensionalModule::Schema schema,
         in MultidimensionalModule::Schema new_schema)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove (
         in DimensionedObject dimensioned_object,
         in MultidimensionalModule::Schema schema)
         raises (Reflective::NotFound, Reflective::MofError);
   }; // end of interface MDSchemaOwnsDimensionedObjects

   struct MDSchemaOwnsDimensionsLink
   {
      CwmDimension dimension;
      MultidimensionalModule::Schema schema;
   };
   typedef sequence<MDSchemaOwnsDimensionsLink> MDSchemaOwnsDimensionsLinkSet;

   interface MDSchemaOwnsDimensions : Reflective::RefAssociation
   {
      MDSchemaOwnsDimensionsLinkSet all_mdschema_owns_dimensions_links()
         raises (Reflective::MofError);
      boolean exists (
         in CwmDimension dimension,
         in MultidimensionalModule::Schema schema)
         raises (Reflective::MofError);
      CwmDimensionSet dimension (in MultidimensionalModule::Schema schema)
         raises (Reflective::MofError);
      MultidimensionalModule::Schema schema (in CwmDimension dimension)
         raises (Reflective::MofError);
      void add (
         in CwmDimension dimension,
         in MultidimensionalModule::Schema schema)
         raises (Reflective::MofError);
      void modify_dimension (
         in CwmDimension dimension,
         in MultidimensionalModule::Schema schema,
         in CwmDimension new_dimension)
         raises (Reflective::NotFound, Reflective::MofError);
      void modify_schema (
         in CwmDimension dimension,
         in MultidimensionalModule::Schema schema,
         in MultidimensionalModule::Schema new_schema)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove (
         in CwmDimension dimension,
         in MultidimensionalModule::Schema schema)
         raises (Reflective::NotFound, Reflective::MofError);
   }; // end of interface MDSchemaOwnsDimensions

   struct DimensionOwnsMemberSetsLink
   {
      CwmMemberSet member_set;
      CwmDimension dimension;
   };
   typedef sequence<DimensionOwnsMemberSetsLink> DimensionOwnsMemberSetsLinkSet;

   interface DimensionOwnsMemberSets : Reflective::RefAssociation
   {
      DimensionOwnsMemberSetsLinkSet all_dimension_owns_member_sets_links()
         raises (Reflective::MofError);
      boolean exists (
         in CwmMemberSet member_set,
         in CwmDimension dimension)
         raises (Reflective::MofError);
      CwmMemberSetSet member_set (in CwmDimension dimension)
         raises (Reflective::MofError);
      CwmDimension dimension (in CwmMemberSet member_set)
         raises (Reflective::MofError);
      void add (
         in CwmMemberSet member_set,
         in CwmDimension dimension)
         raises (Reflective::MofError);
      void modify_member_set (
         in CwmMemberSet member_set,
         in CwmDimension dimension,
         in CwmMemberSet new_member_set)
         raises (Reflective::NotFound, Reflective::MofError);
      void modify_dimension (
         in CwmMemberSet member_set,
         in CwmDimension dimension,
         in CwmDimension new_dimension)
         raises (Reflective::NotFound, Reflective::MofError);
      void remove (
         in CwmMemberSet member_set,
         in CwmDimension dimension)
         raises (Reflective::NotFound, Reflective::MofError);
   }; // end of interface DimensionOwnsMemberSets

   interface MultidimensionalModulePackageFactory
   {
      MultidimensionalModulePackage create_multidimensional_module_package ()
         raises (Reflective::MofError);
   };

   interface MultidimensionalModulePackage : Reflective::RefPackage
   {
      readonly attribute CoreModule::CoreModulePackage core_ref;
      readonly attribute InstanceModule::InstanceModulePackage instance_ref;
      readonly attribute CwmDimensionClass cwm_dimension_ref;
      readonly attribute DimensionedObjectClass dimensioned_object_ref;
      readonly attribute MemberClass member_ref;
      readonly attribute CwmMemberSetClass cwm_member_set_ref;
      readonly attribute MemberValueClass member_value_ref;
      readonly attribute SchemaClass schema_ref;
      readonly attribute DimensionsReferenceDimensionedObjects dimensions_reference_dimensioned_objects_ref;
      readonly attribute CompositesReferenceComponents composites_reference_components_ref;
      readonly attribute MDSchemaOwnsDimensionedObjects mdschema_owns_dimensioned_objects_ref;
      readonly attribute MDSchemaOwnsDimensions mdschema_owns_dimensions_ref;
      readonly attribute DimensionOwnsMemberSets dimension_owns_member_sets_ref;
   };
};

#endif
